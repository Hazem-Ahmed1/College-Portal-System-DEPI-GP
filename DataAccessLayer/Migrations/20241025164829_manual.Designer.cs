// <auto-generated />
using System;
using DataAccessLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241025164829_manual")]
    partial class manual
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("NationalId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("NationalID")
                        .IsFixedLength();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("NationalId")
                        .HasName("PK_Applicat_E9AA321B20B301FC");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("DepartmentID");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrerequisiteCourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Semseter")
                        .HasColumnType("bit");

                    b.HasKey("CourseId")
                        .HasName("PK_Courses_C92D7187B969954B");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PrerequisiteCourseId");

                    b.HasIndex(new[] { "Code" }, "UQ_Courses_A25C5AA766F2798B")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CourseEnrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<decimal>("ClassWork")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("FinalGrade")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("StudentID")
                        .IsFixedLength();

                    b.HasKey("EnrollmentId")
                        .HasName("PK_CourseEn_7F6877FB4D772154");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CourseTeaching", b =>
                {
                    b.Property<int>("TeachingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeachingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeachingId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("ProfessorId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("ProfessorID")
                        .IsFixedLength();

                    b.Property<string>("Taid")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("TAID")
                        .IsFixedLength();

                    b.HasKey("TeachingId")
                        .HasName("PK_CourseTe_69B6BA5EECE67C25");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("Taid");

                    b.ToTable("CourseTeaching", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HeadId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("HeadID")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId")
                        .HasName("PK_Departme_B2079BCDD8AB6AAA");

                    b.HasIndex("HeadId");

                    b.HasIndex(new[] { "Name" }, "UQ_Departme_737584F674071129")
                        .IsUnique();

                    b.HasIndex(new[] { "Code" }, "UQ_Departme_A25C5AA7E8C24511")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FeedbackId")
                        .HasName("PK_Feedback_6A4BEDF6151BB7B9");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.FeedbackResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubmittedByStudentId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("SubmittedByStudentID")
                        .IsFixedLength();

                    b.HasKey("ResponseId")
                        .HasName("PK_Feedback_1AAA640C0178008C");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("SubmittedByStudentId");

                    b.ToTable("FeedbackResponses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SentBy")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.Property<string>("SentTo")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notifica_20CF2E32989922FE");

                    b.HasIndex("SentBy");

                    b.HasIndex("SentTo");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PasswordResetTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("AdminId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("AdminID")
                        .IsFixedLength();

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ResetDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("StudentID")
                        .IsFixedLength();

                    b.HasKey("TicketId")
                        .HasName("PK_Password_712CC627AFF1D053");

                    b.HasIndex("AdminId");

                    b.HasIndex("StudentId");

                    b.ToTable("PasswordResetTickets");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Professor", b =>
                {
                    b.Property<string>("ProfessorId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("ProfessorID")
                        .IsFixedLength();

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("DepartmentID");

                    b.Property<string>("DocUni")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EnterYear")
                        .HasColumnType("int");

                    b.Property<string>("OfficeLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhDat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhDAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProfessorId")
                        .HasName("PK_Professo_9003596931DA9444");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Diffcuilty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.HasKey("QuestionId")
                        .HasName("PK_Question_0DC06F8CB985952F");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Student", b =>
                {
                    b.Property<string>("NationalId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("NationalID")
                        .IsFixedLength();

                    b.Property<bool?>("CollegeState")
                        .HasColumnType("bit");

                    b.Property<bool?>("CurrentState")
                        .HasColumnType("bit");

                    b.Property<short?>("CurrentYear")
                        .HasColumnType("smallint");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<DateOnly>("EntryYear")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("GradYear")
                        .HasColumnType("date");

                    b.Property<int>("HoursTaken")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("TotalGpa")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("TotalGPA");

                    b.HasKey("NationalId")
                        .HasName("PK_Students_E9AA321BAB929904");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubmissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("StudentId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("StudentID")
                        .IsFixedLength();

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmissionLink")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.HasKey("SubmissionId")
                        .HasName("PK_Submissi_449EE1052A1041B0");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("AssignedByTaid")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("AssignedByTAID")
                        .IsFixedLength();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("TaskLink")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TaskId")
                        .HasName("PK_Tasks_7C6949D17FEFD15C");

                    b.HasIndex("AssignedByTaid");

                    b.HasIndex("CourseId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TeachingAssistant", b =>
                {
                    b.Property<string>("Taid")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("TAID")
                        .IsFixedLength();

                    b.Property<string>("AcademicDegree")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssistingProfessorId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("AssistingProfessorID")
                        .IsFixedLength();

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Taid")
                        .HasName("PK_Teaching_B43FE34A3EE17177");

                    b.HasIndex("AssistingProfessorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TeachingAssistants");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("MadeBy")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<decimal>("TotalGrade")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TestId")
                        .HasName("PK_Tests_8CC33100E061DD7A");

                    b.HasIndex("CourseId");

                    b.HasIndex("MadeBy");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TestSubmission", b =>
                {
                    b.Property<int>("TestSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestSubmissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestSubmissionId"));

                    b.Property<string>("StudentId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("StudentID")
                        .IsFixedLength();

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.HasKey("TestSubmissionId")
                        .HasName("PK_TestSubm_BB934B8F6CF7B93B");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("TestSubmissions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Timetable", b =>
                {
                    b.Property<int>("TimetableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimetableID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimetableId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ProfessorId")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("ProfessorID")
                        .IsFixedLength();

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("TimetableId")
                        .HasName("PK_Timetabl_68413F4011C547EC");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(14)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(14)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(14)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(14)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Course", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_CoursesDepartm_367C1819");

                    b.HasOne("DataAccessLayer.Entities.Course", "PrerequisiteCourse")
                        .WithMany("InversePrerequisiteCourse")
                        .HasForeignKey("PrerequisiteCourseId")
                        .HasConstraintName("FK_CoursesPrerequ_3493CFA7");

                    b.Navigation("Department");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CourseEnrCours_5F7E2DAC");

                    b.HasOne("DataAccessLayer.Entities.Student", "Student")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_CourseEnrStude_5E8A0973");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CourseTeaching", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("CourseTeachings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CourseTeaCours_625A9A57");

                    b.HasOne("DataAccessLayer.Entities.Professor", "Professor")
                        .WithMany("CourseTeachings")
                        .HasForeignKey("ProfessorId")
                        .HasConstraintName("FK_CourseTeaProfe_634EBE90");

                    b.HasOne("DataAccessLayer.Entities.TeachingAssistant", "Ta")
                        .WithMany("CourseTeachings")
                        .HasForeignKey("Taid")
                        .HasConstraintName("FK_CourseTeacTAID_6442E2C9");

                    b.Navigation("Course");

                    b.Navigation("Professor");

                    b.Navigation("Ta");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Department", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Professor", "Head")
                        .WithMany("Departments")
                        .HasForeignKey("HeadId")
                        .HasConstraintName("FK_Dept_Head_Prof");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.FeedbackResponse", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackResponses")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_FeedbackRFeedb_56E8E7AB");

                    b.HasOne("DataAccessLayer.Entities.Student", "SubmittedByStudent")
                        .WithMany("FeedbackResponses")
                        .HasForeignKey("SubmittedByStudentId")
                        .HasConstraintName("FK_FeedbackRSubmi_57DD0BE4");

                    b.Navigation("Feedback");

                    b.Navigation("SubmittedByStudent");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Material", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("Materials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Notification", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "SentByNavigation")
                        .WithMany("NotificationSentByNavigations")
                        .HasForeignKey("SentBy")
                        .HasConstraintName("FK_NotificatSentB_51300E55");

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "SentToNavigation")
                        .WithMany("NotificationSentToNavigations")
                        .HasForeignKey("SentTo")
                        .HasConstraintName("FK_NotificatSentT_5224328E");

                    b.Navigation("SentByNavigation");

                    b.Navigation("SentToNavigation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PasswordResetTicket", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "Admin")
                        .WithMany("PasswordResetTickets")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK_PasswordRAdmin_5BAD9CC8");

                    b.HasOne("DataAccessLayer.Entities.Student", "Student")
                        .WithMany("PasswordResetTickets")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_PasswordRStude_5AB9788F");

                    b.Navigation("Admin");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Professor", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Department", "Department")
                        .WithMany("Professors")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_ProfessorDepar_2645B050");

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ProfessorNavigation")
                        .WithOne("Professor")
                        .HasForeignKey("DataAccessLayer.Entities.Professor", "ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProfessorProfe_245D67DE");

                    b.Navigation("Department");

                    b.Navigation("ProfessorNavigation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Question", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_QuestionsTestI_46B27FE2");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Student", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_StudentsDepart_2B0A656D");

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "National")
                        .WithOne("Student")
                        .HasForeignKey("DataAccessLayer.Entities.Student", "NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsNation_29221CFB");

                    b.Navigation("Department");

                    b.Navigation("National");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Submission", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_SubmissioStude_3F115E1A");

                    b.HasOne("DataAccessLayer.Entities.Task", "Task")
                        .WithMany("Submissions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_SubmissioTaskI_3E1D39E1");

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Task", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.TeachingAssistant", "AssignedByTa")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedByTaid")
                        .HasConstraintName("FK_TasksAssignedB_3B40CD36");

                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TasksCourseID_395884C4");

                    b.Navigation("AssignedByTa");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TeachingAssistant", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "AssistingProfessor")
                        .WithMany("TeachingAssistantAssistingProfessors")
                        .HasForeignKey("AssistingProfessorId")
                        .HasConstraintName("FK_TeachingAAssis_30C33EC3");

                    b.HasOne("DataAccessLayer.Entities.Department", "Department")
                        .WithMany("TeachingAssistants")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_TeachingADepar_2FCF1A8A");

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "Ta")
                        .WithOne("TeachingAssistantTa")
                        .HasForeignKey("DataAccessLayer.Entities.TeachingAssistant", "Taid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TeachingAsTAID_2DE6D218");

                    b.Navigation("AssistingProfessor");

                    b.Navigation("Department");

                    b.Navigation("Ta");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Test", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TestsCourseID_42E1EEFE");

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "MadeByNavigation")
                        .WithMany("Tests")
                        .HasForeignKey("MadeBy")
                        .HasConstraintName("FK_TestsMadeBy_41EDCAC5");

                    b.Navigation("Course");

                    b.Navigation("MadeByNavigation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TestSubmission", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Student", "Student")
                        .WithMany("TestSubmissions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_TestSubmiStude_4A8310C6");

                    b.HasOne("DataAccessLayer.Entities.Test", "Test")
                        .WithMany("TestSubmissions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TestSubmiTestI_498EEC8D");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Timetable", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("Timetables")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TimetableCours_4D5F7D71");

                    b.HasOne("DataAccessLayer.Entities.Professor", "Professor")
                        .WithMany("Timetables")
                        .HasForeignKey("ProfessorId")
                        .HasConstraintName("FK_TimetableProfe_4E53A1AA");

                    b.Navigation("Course");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("NotificationSentByNavigations");

                    b.Navigation("NotificationSentToNavigations");

                    b.Navigation("PasswordResetTickets");

                    b.Navigation("Professor");

                    b.Navigation("Student");

                    b.Navigation("TeachingAssistantAssistingProfessors");

                    b.Navigation("TeachingAssistantTa");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Course", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseTeachings");

                    b.Navigation("InversePrerequisiteCourse");

                    b.Navigation("Materials");

                    b.Navigation("Tasks");

                    b.Navigation("Tests");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Professors");

                    b.Navigation("Students");

                    b.Navigation("TeachingAssistants");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackResponses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Professor", b =>
                {
                    b.Navigation("CourseTeachings");

                    b.Navigation("Departments");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Student", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("FeedbackResponses");

                    b.Navigation("PasswordResetTickets");

                    b.Navigation("Submissions");

                    b.Navigation("TestSubmissions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Task", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TeachingAssistant", b =>
                {
                    b.Navigation("CourseTeachings");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestSubmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
